#!/usr/bin/env bash
#
# ARG_POSITIONAL_SINGLE([task],[task to run (all|build|run|tbuild|gui|tokens|clean)],[all])
# ARG_OPTIONAL_SINGLE([toprule],[r],[top rule for grun test],[program])
# ARG_OPTIONAL_SINGLE([input],[i],[input file for test],[style.bopy])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


# # When called, the process ends.
# Args:
# 	$1: The exit message (print to stderr)
# 	$2: The exit code (default is 1)
# if env var _PRINT_HELP is set to 'yes', the usage is print to stderr (prior to $1)
# Example:
# 	test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


# Function that evaluates whether a value passed to it begins by a character
# that is a short option of an argument the script knows about.
# This is required in order to support getopts-like short options grouping.
begins_with_short_option()
{
	local first_option all_short_options='rih'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
# The positional args array has to be reset before the parsing, because it may already be defined
# - for example if this script is sourced by an argbash-powered script.
_positionals=()
_arg_task="all"
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_toprule="program"
_arg_input="style.bopy"


# Function that prints general usage of the script.
# This is useful if users asks for it, or if there is an argument parsing error (unexpected / spurious arguments)
# and it makes sense to remind the user how the script is supposed to be called.
print_help()
{
	printf '%s\n' "The general script's help msg"
	printf 'Usage: %s [-r|--toprule <arg>] [-i|--input <arg>] [-h|--help] [<task>]\n' "$0"
	printf '\t%s\n' "<task>: task to run (all|build|gui|tokens) (default: 'all')"
	printf '\t%s\n' "-r, --toprule: top rule for grun test (default: 'program')"
	printf '\t%s\n' "-i, --input: input file for test (default: 'style.bopy')"
	printf '\t%s\n' "-h, --help: Prints help"
}


# The parsing of the command-line
parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			# We support whitespace as a delimiter between option argument and its value.
			# Therefore, we expect the --toprule or -r value.
			# so we watch for --toprule and -r.
			# Since we know that we got the long or short option,
			# we just reach out for the next argument to get the value.
			-r|--toprule)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_toprule="$2"
				shift
				;;
			# We support the = as a delimiter between option argument and its value.
			# Therefore, we expect --toprule=value, so we watch for --toprule=*
			# For whatever we get, we strip '--toprule=' using the ${var##--toprule=} notation
			# to get the argument value
			--toprule=*)
				_arg_toprule="${_key##--toprule=}"
				;;
			# We support getopts-style short arguments grouping,
			# so as -r accepts value, we allow it to be appended to it, so we watch for -r*
			# and we strip the leading -r from the argument string using the ${var##-r} notation.
			-r*)
				_arg_toprule="${_key##-r}"
				;;
			# See the comment of option '--toprule' to see what's going on here - principle is the same.
			-i|--input)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_input="$2"
				shift
				;;
			# See the comment of option '--toprule=' to see what's going on here - principle is the same.
			--input=*)
				_arg_input="${_key##--input=}"
				;;
			# See the comment of option '-r' to see what's going on here - principle is the same.
			-i*)
				_arg_input="${_key##-i}"
				;;
			# The help argurment doesn't accept a value,
			# we expect the --help or -h, so we watch for them.
			-h|--help)
				print_help
				exit 0
				;;
			# We support getopts-style short arguments clustering,
			# so as -h doesn't accept value, other short options may be appended to it, so we watch for -h*.
			# After stripping the leading -h from the argument, we have to make sure
			# that the first character that follows coresponds to a short option.
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


# Check that we receive expected amount positional arguments.
# Return 0 if everything is OK, 1 if we have too little arguments
# and 2 if we have too much arguments
handle_passed_args_count()
{
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


# Take arguments that we have received, and save them in variables of given names.
# The 'eval' command is needed as the name of target variable is saved into another variable.
assign_positional_args()
{
	local _positional_name _shift_for=$1
	# We have an array of variables to which we want to save positional args values.
	# This array is able to hold array elements as targets.
	# As variables don't contain spaces, they may be held in space-separated string.
	_positional_names="_arg_task "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

# Now call all the functions defined above that are needed to get the job done
parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
# Argbash stuff
# ARG_POSITIONAL_SINGLE([argument-name], [help message (optional)], [default (optional)])
# ARG_OPTIONAL_SINGLE([argument-name-long], [argument-name-short (optional)], [help message (optional)], [default (optional)])
# ARG_OPTIONAL_BOOLEAN([argument-name-long], [argument-name-short (optional)], [help message (optional)], [default (optional)])

grammar="bopy"
gendir="src/edu/$grammar"
topdir="src"
package="edu.$grammar.$grammar"

CLASSPATH="$HOME/.vscode/extensions/mike-lischke.vscode-antlr4-2.2.3/antlr/antlr4-4.7.2-SNAPSHOT-complete.jar:$gendir:$topdir"
antlr4="java -jar $HOME/.vscode/extensions/mike-lischke.vscode-antlr4-2.2.3/antlr/antlr4-4.7.2-SNAPSHOT-complete.jar"
grun="java org.antlr.v4.gui.TestRig"

# $antlr4 $grammar.g4

# all|build|run|tall|tbuild|gui|tokens|clean

if [ $_arg_task = "all" ] ||  [ $_arg_task = "build" ]; then
    echo "Building app"
    # javac $gendir/$grammar*.java
    javac src/edu/bopy/*.java src/edu/app/BopyProgramListener.java src/edu/app/bopy.java

fi

if [ $_arg_task = "all" ] ||  [ $_arg_task = "run" ]; then
    echo "Running app"
    # javac $gendir/$grammar*.java
    java edu.app.Bopy
fi

if [ $_arg_task = "tall" ] ||  [ $_arg_task = "tbuild" ]; then
    echo "Building"
    javac $gendir/$grammar*.java
fi

if [ $_arg_task = "tall" ] ||  [ $_arg_task = "gui" ]; then
    echo "Testing with input file and showing tree: "$_arg_input
    # Test file exists
    $grun $package $_arg_toprule -gui < $_arg_input
fi

if [ $_arg_task = "tall" ] ||  [ $_arg_task = "tokens" ]; then
    echo "Testing with input file and showing tokens: "$_arg_input
    # Test file exists
    $grun $package $_arg_toprule -tokens < $_arg_input
fi

if [ $_arg_task = "clean" ]; then
    echo "Do something"
fi

# ] <-- needed because of Argbash
